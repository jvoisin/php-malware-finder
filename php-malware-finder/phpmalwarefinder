#!/usr/bin/env bash


YARA=$(type -P yara)
CONFIG_PATH='/etc/phpmalwarefinder/common.yar'
IONICE_BIN=$(type -P ionice)
NICE_BIN=$(type -P nice)
FORMAT="php"

if [ ! -x "$YARA" ]
then
    YARA='./yara'
    if [ ! -x "$YARA" ]
    then
        echo "Unable to find yara in your PATH, and in the current directory."
        exit 0
    fi
fi

if [ ! -f "$CONFIG_PATH" ]
then
    OLD_PATH=$CONFIG_PATH
    CONFIG_PATH='./common.yar'
    if [ ! -f "$CONFIG_PATH" ]
    then
        echo "Unable to find 'common.yar' in $OLD_PATH, and in the current directory."
        exit 0
    fi
fi

if [ -x "${IONICE_BIN}" ]
then
    NICE=${IONICE_BIN}
    NICE_OPTS="-c 3"
else
    if [ -x "${NICE_BIN}" ]
    then
        NICE=${NICE_BIN}
        NICE_OPTS="-n 20"
    fi
fi

update_rules() {
  SITE="https://raw.githubusercontent.com/nbs-system/php-malware-finder/master/php-malware-finder/"
  RULES_FILES=('asp.yar' 'common.yar' 'bad_php.yar' 'php.yar'
  'whitelist.yar')
  CONFIG_DIR="/etc/phpmalwarefinder/"

  if [ ! -d $CONFIG_DIR ]; then
      if [ ! -f ./common.yar ]; then
          echo "no rules in $CONFIG_DIR or ./, exiting"
          exit 1
      else
          CONFIG_DIR="./"
      fi;
  fi;

  for FILE in ${RULES_FILES[@]}; do
    wget $SITE/$FILE -O $CONFIG_DIR/$FILE
  done
}

# Determines the format of the target
# Check only the file extension and it's not even accurate
determine_format() {
    # First case: target is a file
    if [ -f "$1" ]; then
        echo "$1" | sed 's/.*\.//'
    # Second case: it is a folder
    elif [ -d "$1" ]; then
        find "$1" -type f -name '*.*' | sed 's/.*\.//' | uniq -c | sort -nr | head -1 | awk '{print $2}'
    fi
}

# before starting yara, check if the file
# TODO (too heavy)
one_line_trick() {

    if [ -z "$FORMAT" ]; then
        FORMAT=$(determine_format "$1")
    fi

    case $FORMAT in
        'asp')
            EXT='*.asp* -o -iname *.cs[^s]*'
            ;;
        'php')
            EXT='*.ph*'
            ;;
        *)
            echo "Couldn't determine the file format, or cannot parse it. Exiting."
            exit 1
            ;;
    esac

    find "$@" -type f -iname "$EXT" -print0  | while IFS= read -r -d '' -r file; do
     read -r lines _ chars _ <<< "$(wc "$file")"
     
     if [ "$lines" -le "2" ]; then
        # humm, 2 lines long file ?
        if [ "$chars" -ge "300" ]; then
            echo "TooShort $file"
        fi;
    fi;
  done;

}

show_help() {
    cat << EOF
Usage ${0##*/} [-cfhtvl] <file|folder> ...
    -c  Optional path to a configuration file
    -f  Fast mode
    -h  Show this help message
    -t  Specify the number of threads to use (8 by default)
    -v  Verbose mode
    -l  Set language ('asp', 'php')
    -u  update rules
EOF
}

OPTIND=1
while getopts "c:fht:vl:u" opt; do
    case "$opt" in
        h)
            show_help
            exit 0
            ;;
        f)
            OPTS="${OPTS} -f"
            ;;
        c)
            CONFIG_PATH=${OPTARG}
            ;;
        t)
            OPTS="${OPTS} --threads=${OPTARG}"
            ;;
        v)
            OPTS="${OPTS} -s"
            ;;
        l)
            FORMAT=${OPTARG}
            ;;
        u)
            update_rules
            exit 0
            ;;
        '?')
            show_help
            exit 1
            ;;
    esac
done
shift "$((OPTIND-1))"

if [ ! -e ${YARA} ]
then
    echo "Can't find yara. Did you installed it?"
    exit 1
fi

if [ ! -e "${CONFIG_PATH}" ]
then
    echo "${CONFIG_PATH} doesn't exist. Please give me a valid file."
    exit 1
fi

if [ -z "$@" ]
then
    show_help
    exit 1
fi

if [ ! -e "${NICE}" ]
then
    echo "No nice program available. Please install ionice or nice."
    exit 1
fi


one_line_trick "$@"

# Include correct yara rule
CONFIG_PATH=${CONFIG_PATH%/*}/
OPTS="${OPTS} -r ${CONFIG_PATH}${FORMAT}.yar"

# Execute rules
${NICE} ${NICE_OPTS} $YARA $OPTS "$@"
